#!/usr/bin/env bash

function setjdk() {
  if [ $# -ne 0 ]; then
   removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
   if [ -n "${JAVA_HOME+x}" ]; then
    removeFromPath $JAVA_HOME
   fi
   export JAVA_HOME=`/usr/libexec/java_home -v $@`
   export PATH=$JAVA_HOME/bin:$PATH
  fi
}

function removeFromPath() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}

confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

function klog() {
    local line_count=10
    if [[ $1 =~ ^[-]{0,1}[0-9]+$ ]]; then
        line_count="$1"
        shift
    fi

    arg_pair=$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    pods_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)
    pod_choosen=$(echo "$pods_out" |  tr ' ' "\n" | _inline_fzf_nh)
    echo kubectl logs -n "${arg_pair} -c ${pod_choosen}" --tail="${line_count}" "$@"
    eval kubectl logs -n "${arg_pair} -c ${pod_choosen}" --tail="${line_count}" "$@"
}

function kget() {
    case "$1" in
    # TODO Add more
    nodes|no|node|ns|namespace|namespaces)
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl get -o yaml "${1}"
    ;;
    *)
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl get -o yaml "${1}" -n
    ;;
    esac
}

function git-clean-branch() {
  OPTION="-d";
  if [[ "$1" == "-f" ]]; then
    echo "WARNING! Removing with force";
    OPTION="-D";
  fi;

  TO_REMOVE=`git branch -r | awk "{print \\$1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \\$1}"`;
  if [[ "$TO_REMOVE" != "" ]] && [[ `echo $TO_REMOVE | wc -l | bc` != "0" ]]; then
    echo "Branches to be removed...";
    printf "\n$TO_REMOVE\n\n";
    echo "Proceed?";

    confirm && echo "$TO_REMOVE" | xargs git branch "$OPTION";
  else
    echo "You have nothing to clean";
  fi
}

port() {
    lsof -n -i:$1
}

portkill() {
    lsof -ti:$1 | xargs kill
}
